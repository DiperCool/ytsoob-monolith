// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ytsoob.Shared.Data;

#nullable disable

namespace Ytsoob.Shared.Data.Migrations
{
    [DbContext(typeof(YtsoobDbContext))]
    partial class YtsoobDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ytsoob.Profiles.Models.Profile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_profiles_id");

                    b.ToTable("profiles", "ytsoob");
                });

            modelBuilder.Entity("Ytsoob.Ytsoobers.Models.Ytsoober", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool>("CreatingCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("creating_completed");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("profile_id");

                    b.HasKey("Id")
                        .HasName("pk_ytsoobers");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_ytsoobers_id");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_ytsoobers_profile_id");

                    b.ToTable("ytsoobers", "ytsoob");
                });

            modelBuilder.Entity("Ytsoob.Profiles.Models.Profile", b =>
                {
                    b.OwnsOne("Ytsoob.Profiles.ValueObjects.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<long>("ProfileId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("first_name");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles", "ytsoob");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId")
                                .HasConstraintName("fk_profiles_profiles_id");
                        });

                    b.OwnsOne("Ytsoob.Profiles.ValueObjects.LastName", "LastName", b1 =>
                        {
                            b1.Property<long>("ProfileId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("last_name");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles", "ytsoob");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId")
                                .HasConstraintName("fk_profiles_profiles_id");
                        });

                    b.Navigation("FirstName");

                    b.Navigation("LastName");
                });

            modelBuilder.Entity("Ytsoob.Ytsoobers.Models.Ytsoober", b =>
                {
                    b.HasOne("Ytsoob.Profiles.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ytsoobers_profiles_profile_id");

                    b.OwnsOne("Ytsoob.Shared.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("YtsooberId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("email");

                            b1.HasKey("YtsooberId");

                            b1.ToTable("ytsoobers", "ytsoob");

                            b1.WithOwner()
                                .HasForeignKey("YtsooberId")
                                .HasConstraintName("fk_ytsoobers_ytsoobers_id");
                        });

                    b.OwnsOne("Ytsoob.Ytsoobers.ValueObjects.Username", "Username", b1 =>
                        {
                            b1.Property<long>("YtsooberId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("username");

                            b1.HasKey("YtsooberId");

                            b1.ToTable("ytsoobers", "ytsoob");

                            b1.WithOwner()
                                .HasForeignKey("YtsooberId")
                                .HasConstraintName("fk_ytsoobers_ytsoobers_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Username")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
